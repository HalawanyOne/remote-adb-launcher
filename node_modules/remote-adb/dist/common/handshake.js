"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRemoteHandshake = getRemoteHandshake;
function getRemoteHandshake(ws) {
    return new Promise((resolve, reject) => {
        const onWebsocketClose = () => {
            reject(new Error("WebSocket closed while waiting for handshake"));
        };
        ws.addEventListener("close", onWebsocketClose, { once: true });
        ws.addEventListener("message", (message) => {
            try {
                const handshakeData = JSON.parse(message.data);
                if (handshakeData.type !== "handshake") {
                    throw new Error("Unexpected handshake message");
                }
                resolve(handshakeData);
            }
            catch (e) {
                reject(new Error(`Handshake failed: ${e.message}`));
            }
            finally {
                ws.removeEventListener("close", onWebsocketClose);
            }
        }, { once: true });
    });
}
//# sourceMappingURL=handshake.js.map