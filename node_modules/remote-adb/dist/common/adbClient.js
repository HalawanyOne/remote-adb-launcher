"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdbClient = void 0;
const net = __importStar(require("net"));
class AdbClient {
    connect() {
        return __awaiter(this, arguments, void 0, function* (port = 5037, host = "127.0.0.1") {
            return yield new Promise((resolve, reject) => {
                let socket = net.connect(port, host, () => {
                    this.socket = socket;
                    resolve(socket);
                });
                socket.on("error", reject);
            });
        });
    }
    read(size) {
        return __awaiter(this, void 0, void 0, function* () {
            let data = this.socket.read(size);
            if (data === null) {
                yield new Promise((resolve, reject) => {
                    this.socket.once("readable", resolve);
                });
                return yield this.read(size);
            }
            return data;
        });
    }
    writeRequest(request) {
        const length = request.length;
        this.socket.write(`000${length.toString(16)}`.slice(-4) + request);
    }
    // Returns string or null if connection is closed without any data
    // Throws if error in reading expected data
    readMessage() {
        return __awaiter(this, void 0, void 0, function* () {
            let header = (yield this.read(4)).toString();
            if (header.length === 0) {
                // Connection closed
                return null;
            }
            if (header.length < 4) {
                throw new Error("adb protocol error, could not read message length");
            }
            let length = parseInt(header, 16);
            if (length === 0) {
                return "";
            }
            let data = yield this.read(length);
            if (data.length != length) {
                throw new Error("adb protocol error, could not read message");
            }
            return data.toString();
        });
    }
    readResponse() {
        return __awaiter(this, void 0, void 0, function* () {
            let status = (yield this.read(4)).toString();
            if (status === "OKAY") {
                return;
            }
            else if (status === "FAIL") {
                throw new Error(yield this.readMessage());
            }
            else {
                throw new Error("adb protocol error, could not read status");
            }
        });
    }
    request(service) {
        return __awaiter(this, void 0, void 0, function* () {
            this.writeRequest(service);
            return yield this.readResponse();
        });
    }
}
exports.AdbClient = AdbClient;
//# sourceMappingURL=adbClient.js.map