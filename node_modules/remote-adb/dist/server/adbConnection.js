"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.monitorAdbServer = monitorAdbServer;
exports.addAdbDevice = addAdbDevice;
exports.removeAdbDevice = removeAdbDevice;
const adbClient_1 = require("../common/adbClient");
const logger_1 = __importDefault(require("../common/logger"));
let adbConnection;
let connectedDevices = new Set();
function adbMonitorDisconnected() {
    return __awaiter(this, void 0, void 0, function* () {
        if (!adbConnection) {
            return;
        }
        adbConnection = undefined;
        logger_1.default.log("adb server disconnected");
    });
}
function adbMonitorConnected(adbClient) {
    return __awaiter(this, void 0, void 0, function* () {
        adbConnection = adbClient;
        logger_1.default.log("adb server connected");
        try {
            yield adbClient.request("host:track-devices-l");
            logger_1.default.log("track-devices", "started");
            addAllAdbDevices();
            let message;
            do {
                message = yield adbClient.readMessage();
                message.trim().split("\n")
                    .map(m => m.trim())
                    .map(m => logger_1.default.log("track-devices", m));
            } while (message != null);
        }
        catch (e) {
            logger_1.default.log("track-devices", "error", e.message);
        }
    });
}
function addAllAdbDevices() {
    return __awaiter(this, void 0, void 0, function* () {
        if (!connectedDevices.size)
            return;
        logger_1.default.log("try adding all previous devices");
        connectedDevices.forEach((port) => {
            adbConnect(port);
        });
    });
}
function monitorAdbServer() {
    return __awaiter(this, void 0, void 0, function* () {
        logger_1.default.log("Monitoring adb server");
        do {
            let timer = new Promise((resolve, reject) => {
                setTimeout(resolve, 1000);
            });
            try {
                const adbClient = new adbClient_1.AdbClient();
                const socket = yield adbClient.connect();
                adbMonitorConnected(adbClient);
                // Wait for the socket to close
                yield new Promise((resolve, reject) => {
                    socket.on("error", (e) => {
                        // Do nothing
                    });
                    socket.on("close", (hadError) => {
                        adbMonitorDisconnected();
                        resolve();
                    });
                });
            }
            catch (e) {
                // Do nothing
            }
            yield timer;
        } while (true);
    });
}
function addAdbDevice(port) {
    return __awaiter(this, void 0, void 0, function* () {
        if (adbConnection) {
            adbConnect(port);
        }
        connectedDevices.add(port);
    });
}
function removeAdbDevice(port) {
    return __awaiter(this, void 0, void 0, function* () {
        if (adbConnection) {
            adbConnect(port, true /* disconnect */);
        }
        connectedDevices.delete(port);
    });
}
function adbMessage(message) {
    const length = message.length;
    return `000${length.toString(16)}`.slice(-4) + message;
}
function adbConnect(port, disconnect) {
    return __awaiter(this, void 0, void 0, function* () {
        logger_1.default.log(port, disconnect ? "disconnecting device from adb" : "connecting device to adb");
        try {
            const adbClient = new adbClient_1.AdbClient();
            yield adbClient.connect();
            yield adbClient.request(`host:${disconnect ? "disconnect" : "connect"}:127.0.0.1:${port}`);
            const message = yield adbClient.readMessage();
            logger_1.default.log(port, message);
        }
        catch (e) {
            logger_1.default.log(port, "error", e.message);
        }
    });
}
//# sourceMappingURL=adbConnection.js.map