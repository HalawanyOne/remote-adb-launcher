"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.commandServer = void 0;
const fs = __importStar(require("fs"));
const server_1 = require("./server");
exports.commandServer = {
    command: "server",
    describe: "Start in server mode",
    builder: (yargs) => {
        return yargs
            .usage('$0 server [--port PORT] [--key server.key --cert server.crt]')
            .option('port', {
            alias: 'p',
            describe: 'port to run the server on',
            default: 3000,
            nargs: 1,
            type: 'number',
        })
            .option('host', {
            describe: 'host to bind the server to',
            nargs: 1,
            type: 'string',
        })
            .option('password', {
            describe: 'specify password required to connect',
            type: 'string',
            nargs: 1
        })
            .group(['port', 'host', 'password'], "Server Options:")
            .option('key', {
            describe: 'file containing RSA private key',
            requiresArg: true
        })
            .option('cert', {
            describe: 'file containing SSL certificate chain',
            requiresArg: true
        })
            .implies({
            'key': 'cert',
            'cert': 'key'
        })
            .normalize(['key', 'cert'])
            .check((argv) => {
            if (argv.key) {
                fs.accessSync(argv.key, fs.constants.R_OK);
            }
            if (argv.cert) {
                fs.accessSync(argv.cert, fs.constants.R_OK);
            }
            return true;
        })
            .group(['key', 'cert'], "HTTPS Options:")
            .strict();
    },
    handler: (args) => {
        const useHttps = !!(args.key && args.cert);
        const httpsOptions = useHttps ? {
            key: fs.readFileSync(args.key),
            cert: fs.readFileSync(args.cert)
        } : undefined;
        const listenOptions = { port: args.port, host: args.host };
        new server_1.Server(listenOptions, httpsOptions, {
            password: args.password
        }).start();
    }
};
//# sourceMappingURL=command.js.map