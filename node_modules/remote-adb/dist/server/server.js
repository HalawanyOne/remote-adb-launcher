"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Server = void 0;
const http = __importStar(require("http"));
const https = __importStar(require("https"));
const net = __importStar(require("net"));
const path = __importStar(require("path"));
const crypto_1 = require("crypto");
const express_1 = __importDefault(require("express"));
const express_session_1 = __importDefault(require("express-session"));
const body_parser_1 = __importDefault(require("body-parser"));
const ws_1 = __importDefault(require("ws"));
const stoppable_1 = __importDefault(require("stoppable"));
const logger_1 = __importDefault(require("../common/logger"));
const adbConnection_1 = require("./adbConnection");
const handshake_1 = require("../common/handshake");
class Server {
    constructor(listenOptions, httpsOptions, serverConfig) {
        this.wsKeepaliveInterval = undefined;
        this.handleWsConnection = (ws) => __awaiter(this, void 0, void 0, function* () {
            logger_1.default.log("Got new web socket connection. Waiting for handshake...");
            try {
                let handshakeData = yield (0, handshake_1.getRemoteHandshake)(ws);
                let wsStream = ws_1.default.createWebSocketStream(ws);
                wsStream.on("error", () => {
                    // Do nothing
                    // Sometimes this can happen when trying to write to the socket after it is closed in the process of closing the connection. Ignore.
                });
                let port;
                let server = net.createServer((socket) => {
                    socket.pipe(wsStream, { end: false }).pipe(socket);
                    socket.on("close", (hadError) => {
                        socket.unpipe(wsStream);
                        wsStream.unpipe(socket);
                    });
                }).listen(0, () => {
                    port = server.address().port;
                    logger_1.default.log(port, `New device (${handshakeData.name}, ${handshakeData.serial})`);
                    const handshakeResponse = {
                        type: "handshake",
                        serial: `127.0.0.1:${port}`,
                    };
                    ws.send(JSON.stringify(handshakeResponse));
                    (0, adbConnection_1.addAdbDevice)(port);
                });
                ws.on("close", () => {
                    logger_1.default.log(port, `Device lost (${handshakeData.name}, ${handshakeData.serial})`);
                    server.close();
                    (0, adbConnection_1.removeAdbDevice)(port);
                });
            }
            catch (e) {
                logger_1.default.error(`Error connecting: ${e.message}`);
                ws.close();
            }
        });
        this.listenOptions = listenOptions;
        this.httpsOptions = httpsOptions;
        this.serverConfig = serverConfig;
    }
    get loginSupported() {
        var _a;
        return !!((_a = this.serverConfig) === null || _a === void 0 ? void 0 : _a.password);
    }
    loginRequired(req) {
        return this.loginSupported && !req.session.userId;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const app = (0, express_1.default)();
            const useHttps = !!this.httpsOptions;
            const server = (0, stoppable_1.default)(useHttps ? https.createServer(this.httpsOptions, app) : http.createServer(app), 1000 /*grace*/);
            const wss = new ws_1.default.Server({ noServer: true });
            // Setup authentication
            const sessionParser = (0, express_session_1.default)({
                secret: (0, crypto_1.randomBytes)(48).toString("hex"),
                resave: false,
                saveUninitialized: false,
            });
            app.use(sessionParser);
            app.use(body_parser_1.default.urlencoded({ extended: true }));
            app.use(body_parser_1.default.json());
            app.get('/status', (req, res) => {
                res.json({
                    result: "OK",
                    loginSupported: this.loginSupported,
                    loginRequired: this.loginRequired(req)
                });
                res.end();
            });
            app.post('/login', (req, res) => {
                if (!this.loginSupported || req.body.password === this.serverConfig.password) {
                    req.session.regenerate(() => {
                        req.session.userId = "user";
                        res.json({
                            result: "OK",
                        });
                        res.end();
                    });
                }
                else {
                    res.json({
                        result: "FAIL",
                        message: "Authentication error"
                    });
                    res.end();
                }
            });
            app.post('/logout', (req, res) => {
                req.session.destroy(() => {
                    res.json({
                        result: "OK",
                    });
                    res.end();
                });
            });
            // Serve static files from client
            app.use(express_1.default.static((_b = (_a = this.serverConfig) === null || _a === void 0 ? void 0 : _a.staticClientPath) !== null && _b !== void 0 ? _b : path.join(__dirname, '../web')));
            // Setup web socket server
            wss.on('connection', this.handleWsConnection);
            server.on('upgrade', (request, socket, head) => {
                // This function is not defined on purpose. Implement it with your own logic.
                sessionParser(request, {}, () => {
                    if (this.loginRequired(request)) {
                        socket.write('HTTP/1.1 401 Unauthorized\r\n\r\n');
                        socket.destroy();
                        return;
                    }
                    wss.handleUpgrade(request, socket, head, function (ws) {
                        wss.emit('connection', ws, request);
                    });
                });
            });
            // Start listening
            const serverAddress = yield new Promise((resolve, reject) => {
                server.on("error", reject);
                // Start the server
                server.listen(this.listenOptions, () => {
                    resolve(server.address());
                });
            });
            // Start websocket keepalive loop
            this.wsKeepaliveInterval = setInterval(() => {
                try {
                    wss.clients.forEach((ws) => {
                        if (ws.readyState === ws_1.default.OPEN) {
                            // logger.log(new Date(), "Sending ping to client");
                            ws.ping();
                        }
                    });
                }
                catch (e) {
                    // Do nothing
                }
            }, 20000);
            this.server = server;
            this.serverAddress = serverAddress;
            const url = `${useHttps ? 'https' : 'http'}://${this.getServerAddress()}`;
            logger_1.default.log(`Started listening on ${url}`);
            // Start monitoring adb server
            (0, adbConnection_1.monitorAdbServer)();
            return url;
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            // Stop websocket keepalive loop
            if (this.wsKeepaliveInterval !== undefined) {
                clearInterval(this.wsKeepaliveInterval);
                this.wsKeepaliveInterval = undefined;
            }
            // Stop server if running
            if (this.server) {
                yield new Promise((resolve, reject) => {
                    this.server.stop((e) => {
                        if (e) {
                            return reject(e);
                        }
                        resolve();
                    });
                });
                this.server.removeAllListeners();
                this.server = undefined;
                logger_1.default.log(`Stopped listening on ${this.getServerAddress()}`);
            }
        });
    }
    isListening() {
        return this.server && this.server.listening;
    }
    getServerAddress() {
        if (!this.serverAddress || typeof this.serverAddress === "string") {
            return this.serverAddress;
        }
        else {
            let host = this.serverAddress.address;
            if (this.serverAddress.family === 'IPv6') {
                host = `[${host}]`;
            }
            return `${host}:${this.serverAddress.port}`;
        }
    }
}
exports.Server = Server;
//# sourceMappingURL=server.js.map