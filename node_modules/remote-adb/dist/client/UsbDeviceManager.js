"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsbDeviceManager = void 0;
const EventEmitter = require("events");
const usb_1 = require("usb");
const logger_1 = __importDefault(require("../common/logger"));
const AdbWebUsbTransport_1 = require("./AdbWebUsbTransport");
const RemoteAdbDevice_1 = require("./RemoteAdbDevice");
class UsbDeviceManagerSingleton {
    get usb() {
        if (!this._usbInitialized) {
            if (typeof navigator !== "undefined") {
                this._usb = navigator === null || navigator === void 0 ? void 0 : navigator.usb;
            }
            if (typeof usb_1.WebUSB !== "undefined") {
                this._usb = new usb_1.WebUSB({
                    allowAllDevices: true
                });
            }
            this._usbInitialized = true;
        }
        return this._usb;
    }
    constructor() {
        this.events = new EventEmitter();
        this.connectedDevices = new Map();
        this._usb = undefined;
        this._usbInitialized = false;
        this.isSupported = () => {
            return !!this.usb;
        };
        this.requestDevice = () => __awaiter(this, void 0, void 0, function* () {
            let device = yield this.usb.requestDevice({ filters: [AdbWebUsbTransport_1.WebUsbDeviceFilter] });
            this.refreshDevices();
            return device;
        });
        this.createRemoteAdbDevice = (d) => {
            let device = new RemoteAdbDevice_1.RemoteAdbDevice(new AdbWebUsbTransport_1.AdbWebUsbTransport(this.usb, d));
            device.on("connected", this.refreshDevices);
            device.on("disconnected", this.refreshDevices);
            return device;
        };
        this.refreshDevices = () => __awaiter(this, void 0, void 0, function* () {
            if (!this.events.listenerCount("devices")) {
                // If not listener is registered, don't do anything.
                return;
            }
            logger_1.default.log("Refreshing device list");
            const devices = yield this.getDevices();
            this.events.emit("devices", devices);
            return devices;
        });
        this.getDevices = () => __awaiter(this, void 0, void 0, function* () {
            const currentDevices = new Map();
            const devices = (yield this.usb.getDevices())
                .filter(d => {
                var _a;
                return (_a = d.configuration) === null || _a === void 0 ? void 0 : _a.interfaces.some(iface => {
                    return iface.alternate.interfaceClass === AdbWebUsbTransport_1.WebUsbDeviceFilter.classCode
                        && iface.alternate.interfaceSubclass === AdbWebUsbTransport_1.WebUsbDeviceFilter.subclassCode
                        && iface.alternate.interfaceProtocol === AdbWebUsbTransport_1.WebUsbDeviceFilter.protocolCode;
                });
            })
                .map((d) => {
                var _a;
                let device = (_a = this.connectedDevices.get(d)) !== null && _a !== void 0 ? _a : this.createRemoteAdbDevice(d);
                currentDevices.set(d, device);
                return device;
            });
            this.connectedDevices = currentDevices;
            return devices;
        });
        this.monitorDevices = (callback) => {
            this.events.on('devices', callback);
            this.refreshDevices();
        };
        this.events.once("newListener", (event, listener) => {
            this.usb.addEventListener('connect', this.refreshDevices);
            this.usb.addEventListener('disconnect', this.refreshDevices);
        });
    }
}
exports.UsbDeviceManager = new UsbDeviceManagerSingleton();
//# sourceMappingURL=UsbDeviceManager.js.map