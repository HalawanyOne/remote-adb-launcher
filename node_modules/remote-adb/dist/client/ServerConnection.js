"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerConnection = exports.WebSocket = void 0;
const events_1 = __importDefault(require("events"));
const isomorphic_ws_1 = __importDefault(require("isomorphic-ws"));
exports.WebSocket = isomorphic_ws_1.default;
// Imports only available when running in node
const node_fetch_1 = __importDefault(require("node-fetch"));
const fetch_cookie_1 = __importDefault(require("fetch-cookie"));
const url = {
    status: "status",
    login: "login",
};
class ServerConnection {
    constructor(address) {
        this.events = new events_1.default();
        this.updateLoopRunning = false;
        this.lastServerStatusPromise = Promise.resolve({});
        this.cookieJar = undefined;
        this.login = (password) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const res = yield this.fetch(url.login, {
                method: "post",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ password: password })
            });
            if (res.status !== 200) {
                throw new Error(`Status code ${res.status}`);
            }
            const data = yield res.json();
            if (data.result !== "OK") {
                throw new Error((_a = data.message) !== null && _a !== void 0 ? _a : "Unknown error");
            }
        });
        this.monitorServerStatus = (callback) => __awaiter(this, void 0, void 0, function* () {
            this.events.on("statusChanged", callback);
            if (!this.updateLoopRunning) {
                this.updateStatusLoop();
            }
        });
        this.getServerStatus = () => __awaiter(this, void 0, void 0, function* () {
            yield this.lastServerStatusPromise;
            this.lastServerStatusPromise = this.fetchServerStatus();
            const status = yield this.lastServerStatusPromise;
            this.events.emit("statusChanged", status);
            return status;
        });
        this.updateStatusLoop = () => __awaiter(this, void 0, void 0, function* () {
            this.updateLoopRunning = true;
            yield this.getServerStatus();
            setTimeout(this.updateStatusLoop, 5000);
        });
        this.fetchServerStatus = () => __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.fetch(url.status, {
                    headers: {
                        'Content-Type': 'application/json'
                    },
                });
                if (res.status !== 200) {
                    throw new Error(`Status code ${res.status}`);
                }
                return yield res.json();
            }
            catch (e) {
                return {
                    _error: e.message
                };
            }
        });
        this.serverAddress = address;
        if (typeof window !== "undefined" && typeof fetch === "function") {
            this._fetch = fetch.bind(window);
        }
        else {
            this.cookieJar = new fetch_cookie_1.default.toughCookie.CookieJar();
            this._fetch = (0, fetch_cookie_1.default)(node_fetch_1.default, this.cookieJar);
        }
    }
    resolveUrl(url, protocol) {
        let resolvedUrl = new URL(url, this.serverAddress);
        resolvedUrl.protocol = resolvedUrl.protocol.replace("http", protocol);
        return resolvedUrl.href;
    }
    fetch(url, init) {
        let resolvedUrl = this.resolveUrl(url, "http");
        return this._fetch(resolvedUrl, init);
    }
    createWebSocket(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const resolvedUrl = this.resolveUrl(url !== null && url !== void 0 ? url : "", "ws");
            if (this.cookieJar) {
                return new isomorphic_ws_1.default(resolvedUrl, {
                    headers: {
                        "Cookie": yield this.cookieJar.getCookieString(resolvedUrl)
                    }
                });
            }
            else {
                return new isomorphic_ws_1.default(resolvedUrl);
            }
        });
    }
}
exports.ServerConnection = ServerConnection;
//# sourceMappingURL=ServerConnection.js.map