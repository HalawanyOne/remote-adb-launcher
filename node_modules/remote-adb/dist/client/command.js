"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.commandConnect = exports.commandDevices = void 0;
const logger_1 = __importDefault(require("../common/logger"));
const ServerConnection_1 = require("./ServerConnection");
const TcpDeviceManager_1 = require("./TcpDeviceManager");
const UsbDeviceManager_1 = require("./UsbDeviceManager");
exports.commandDevices = {
    command: "devices",
    describe: "List locally connected devices",
    builder: (yargs) => {
        return yargs
            .usage("$0 devices");
    },
    handler: (args) => {
        if (!UsbDeviceManager_1.UsbDeviceManager.isSupported()) {
            logger_1.default.error("USB devices are not supported");
            return;
        }
        Promise.all([UsbDeviceManager_1.UsbDeviceManager.getDevices(), TcpDeviceManager_1.TcpDeviceManager.getDevices()])
            .then(([usbDevices, tcpDevices]) => {
            return usbDevices.concat(tcpDevices);
        })
            .then((devices) => {
            logger_1.default.log("List of devices attached");
            devices.forEach((d) => {
                if (d.name != d.serial) {
                    logger_1.default.log(`${d.serial}\t${d.name}`);
                }
                else {
                    logger_1.default.log(`${d.serial}`);
                }
            });
            process.exit(0);
        });
    }
};
exports.commandConnect = {
    command: "connect <server>",
    describe: "Connect locally connected device to server",
    builder: (yargs) => {
        return yargs
            .usage("$0 connect [-s SERIAL|HOST:PORT] <server>")
            .option("serial", {
            alias: "s",
            describe: "use device with given serial or host:port",
            nargs: 1,
            string: true,
        })
            .group(["s"], "Device Selection:")
            .option("password", {
            alias: "p",
            describe: "password to use if required by the server",
            nargs: 1,
            string: true,
        })
            .group(["p"], "Server options:")
            .positional("server", {
            describe: "URL of the server (e.g. http://192.168.1.10:3000)",
            string: true,
            demandOption: "true",
        })
            .example("$0 connect http://remote-host:3000 -s USBSERIAL", "Connect device USBSERIAL via usb")
            .example("$0 connect http://remote-host:3000 -s 127.0.0.1:5557", "Connect device on 127.0.0.1:5555 via tcp");
    },
    handler: (args) => {
        connect(args);
    }
};
function connect(args) {
    return __awaiter(this, void 0, void 0, function* () {
        let device;
        // First try to see if this is a tcp device
        device = yield TcpDeviceManager_1.TcpDeviceManager.createDevice(args.serial);
        // Find usb device with serial or exit
        device = device || (yield ensureUsbDevice(args.serial));
        // We should not reach here, just in case.
        if (!device) {
            process.exit(1);
        }
        logger_1.default.log(`Preparing to connect device "${device.name} (${device.serial})"`);
        const serverConnection = new ServerConnection_1.ServerConnection(args.server);
        logger_1.default.log("Connecting to server for status");
        const status = yield serverConnection.getServerStatus();
        if (status._error) {
            logger_1.default.error(`Cannot get server status: ${status._error}`);
            process.exit(3);
        }
        else if (status.loginSupported && status.loginRequired) {
            if (!args.password) {
                logger_1.default.error("Server requires authentication. Please provide a password with --password.");
                process.exit(4);
            }
            logger_1.default.log("Server requires authentication. Trying to login.");
            try {
                yield serverConnection.login(args.password);
            }
            catch (e) {
                logger_1.default.error(`Authentication failed: ${e.message}`);
                process.exit(5);
            }
            logger_1.default.log("Authentication successful");
        }
        logger_1.default.log(`Connecting device "${device.name} (${device.serial})"`);
        device.on("disconnected", () => {
            process.exit(0);
        });
        try {
            yield device.connect(serverConnection);
        }
        catch (e) {
            logger_1.default.error(`Unable to connect device: ${e.message}`);
            process.exit(2);
        }
        process.on("SIGINT", () => __awaiter(this, void 0, void 0, function* () {
            logger_1.default.log("Disconnecting device");
            yield device.disconnect();
            process.exit(0);
        }));
    });
}
function ensureUsbDevice(serial) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!UsbDeviceManager_1.UsbDeviceManager.isSupported()) {
            logger_1.default.error("USB devices are not supported");
            process.exit(1);
        }
        let devices = yield UsbDeviceManager_1.UsbDeviceManager.getDevices();
        let device;
        if (serial) {
            let filtered = devices.filter((d) => {
                return d.serial == serial;
            });
            if (!filtered.length) {
                logger_1.default.error(`Could not find connected device with serial "${serial}"`);
                process.exit(1);
            }
            device = filtered[0];
        }
        else if (devices.length > 1) {
            logger_1.default.error("More than one devices connected. Please specify a device with --serial.");
            process.exit(1);
        }
        else if (!devices.length) {
            logger_1.default.error("No USB devices connected");
            process.exit(1);
        }
        else {
            device = devices[0];
        }
        return device;
    });
}
//# sourceMappingURL=command.js.map